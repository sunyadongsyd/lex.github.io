{"pages":[{"title":"about","text":"","link":"/about/index.html"}],"posts":[{"title":"Hexo 博客备份","text":"更极端的情况是突然有一天硬盘说坏就坏掉了，即使你能重新部署好站点，但所有之前写过的文章都已经随硬盘消失了。 Hexo官方文档并没有给出备份站点和文章的方法，得益于机智的网友，下面给出一个优雅的解决方案 备份方案实现备份依赖下面两个原理 我们写文章或者修改配置都是对项目源码的修改，执行hexo g命令才会渲染生成前台页面 执行hexo d命令会将渲染后的静态页面文件会提交到GitHub Pages的master分支保存和显示 显然，备份的目的在于将完整源码备份，这里需要用到一个新的分支（区别于master分支），将每次写文章或者修改配置后的源码提交到这个分支，而hexo d则会按以往方式将静态页面提交到master分支，这样就能将源码和静态文件完美区分开，并都保存到了站点的GitHub仓库中 完成上面操作就可以保证不论何时何地都可以拉取远程仓库的站点源码到本地，修改后再通过hexo g -d把静态页面发布到GitHub Page 原理解释完，具体实现步骤如下 新建分支在项目主页点击Branch，输入分支名称如hexo，点击Create 点击Setting下的Branch标签，设置hexo为默认分支 初始化分支代码新建一个站点文件夹，克隆项目仓库到本地 12mkdir bloggit clone git@github.com:username/username.github.io.git blog 拷贝原Hexo文件夹中的文件或目录到新的站点文件夹下，只需要如下几个： _config.yml：站点配置文件 themes/：主题文件夹 source：资源文件夹，包括博文 scffolds/：文章模板 package.json：安装包配置 .gitignore：如题 删除/themes/next/.git/文件夹 1rm -rf /themes/next/.git/ 安装软件包 12npm installnpm install hexo-deployer-git 生成并部署站点，这一步会将静态页面提交到master分支 1hexo g -d 提交源码到hexo分支 123git add .git ci -m 'backup init'git push 修改完成上面步骤站点就具有了备份的条件，每一次写文章或对站点做了修改后，需要执行上一节最后两步来完成备份 生成并部署 1hexo g -d 提交源码 123git add .git ci -m 'commit msg'git push 迁移如果更换了电脑或者环境，按以下步骤操作 安装Git和Node.js 配置SSH Key（参考） 克隆远程仓库到本地 git clone git@github.com:username/username.github.io.git blog 安装Hexo及其它软件包 123npm install -g hexo-clinpm installnpm install install hexo-deployer-git 完成后即可继续撰写和发布文章了","link":"/2019/11/20/01hexo/01%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD/"},{"title":"埃森哲被告上法庭：两年花两亿，连个可用的网站都不能交付","text":"耗费2个多亿，耗时2年多，连一个可用的网站或者APP都没有交付出来。 想要完工？那就再交1000万美元。 这件事的受害方、美国汽车租赁公司赫兹（Hertz）一怒之下， 将顶级咨询公司埃森哲（Accenture）告上了法庭。 故事起于2016年8月，赫兹想要改造自身的在线业务。 赫兹公司表示，当时他们被埃森哲一整天的展示打动了，邀请其来负责整个项目，包括设计、构建、测试和部署赫兹的新网站和移动应用程序。 按照双方的约定，新的网站要在2017年12月上线，开发周期为1年零4个月。尽管如此，上线时间还是频频延迟，先是到2018年1月，然后是2018年4月。 最后，赫兹公司发现，尽管又过去了5个月，埃森哲进行的产品和设计工作还没有达到整体要求的一半。 便一怒之下，中止双方的合作，将其告上法庭，称他们已经不再相信埃森哲有能力完成这个项目。 而且，赫兹还要求埃森哲赔偿项目费用3200万美元（约合2.15亿人民币）以及这一项目给公司带来的数百万美元损失。 埃森哲设计的到底是什么样的一个网站？这么难以交付？面对这个网站，赫兹为什么会如此“大动肝火”？ 在起诉书中，赫兹“痛斥”了埃森哲设计网站时的种种“罪状”。英国科技新闻网站The Register评论称，这是一个“来自地狱”的网站重新设计的故事。 痛斥埃森哲十大“罪状” 起诉书中，赫兹主要列举了埃森哲的十大“罪状”。 1、网站没有响应式设计 响应式设计，即网页能够自动调整大小来适应访问者的屏幕大小，无论他们使用的是手机、平板电脑、台式机还是笔记本电脑。 这是多年来设计网站的标准做法，这一要求也清楚地写进了合同。 但埃森哲的开发者只设计了电脑版和移动版的网站。想要适用于平板电脑的网站？麻烦再掏数十万美元。 2、无视可扩展性要求 赫兹表示，项目的架构规范明确规定，网站设计的一个基本原则是其可扩展性。也就是说，使用一个公共核心库，可以扩展到赫兹每个品牌的网站和移动应用程序。 但在赫兹不知道或不同意的情况下，埃森哲故意忽略了可扩展性要求，只是编写了仅供北美赫兹品牌使用的代码。而赫兹的其他品牌，都不适用。 3、代码有安全问题 在代码的编写上，埃森哲也存在问题。赫兹在起诉中称，埃森哲的开发者为面向客户的电子商务网站编写的代码，造成了严重的安全漏洞和性能问题。 因为代码中的缺陷非常普遍，他们不得不废弃埃森哲在这方面的所有工作。整个系统中的其他组件，大部分代码也都不可用。 4、未进行适当的测试 在这方面，赫兹“吐槽”了两点：一是系统中的许多组件，埃森哲都没有进行测试。二是进行测试的时候严重不足，甚至产生了误导性。 赫兹表示，埃森哲测试的时候，使用的是“Happy Path”方法。在众多围观的吃瓜群众看来，这要是能测出来问题，才怪…… 5、前端代码开发上有问题 在开发“集成层”（integration layer）的时候，埃森哲的开发团队很难理解赫兹的后端系统，比如预定和更改预定的系统等等， 以至于其很难编写用于整合层的软件。 赫兹称，埃森哲自己也承认了这方面存在问题。他们在2018年1月称“前端技术(Front End Technology，Angular2)是一个挑战。” 是的，Angular2。很多网友看到这一点的时候，都用“？”和“god”来形容自己的心情。 有人给出了一个解释是，稳定版的Angular 2是建立在不稳定的技术上的…… 赫兹认为，埃森哲也严重低估了其在FED上存在的问题。 在赫兹的团队接管了项目开发工作之后，完全抛弃了埃森哲的开发工作，因为他们认为埃森哲写的代码太烂了，根本无法挽救。 6、在AEM组件代码上存在严重缺陷 AEM组件，是允许赫兹创建、编辑和更改其网站内容的内容管理系统。但埃森哲并没有基于 Adobe AEM 原型开发代码和设计文件结构。 赫兹认为，这使得应用程序不可靠，并难以维护，后续的更新中也会变得非常麻烦，效率低下。 7、Java代码不符合标准 赫兹说，埃森哲写的Java代码，并没有遵循Java标准，逻辑性很差，很糟糕，很难维护。 ​ 8、买了技术许可，埃森哲也实施不了 赫兹在起诉书中提到，埃森哲的团队建议自己购买一种名为RAPID的技术的许可，这项技术可以简化新网站内容管理系统的开发。 他们遵循了这一建议，并获得了技术许可，但埃森哲却无法实施它。埃森哲的项目负责人承认，埃森哲“花费了大量的时间”将RAPID整合到赫兹的环境中。 9、项目管理失败 在项目的第二阶段，埃森哲替换了一些最重要的团队成员，包括产品负责人和架构师。 但新来者没有相同水平的经验，并且在交接过程中丢失了大量的背景知识。 埃森哲也承认，网站上线的延误和开发中遇到的困难，至少部分是由于项目期间“关键资源”的离开造成的。 10、只提供PDF版的视觉风格指南 赫兹说，尽管明确指出，埃森哲要以交互式的格式(而非静态PDF格式)开发视觉风格指南，甚至给提供了交互式样式指南作为范例，但埃森哲还是反复提供静态PDF格式的视觉风格指南。 直接提出这个问题后，埃森哲拒绝提供一个交互式视觉风格指南来弥补缺陷，想要交互式的？再拿数十万美元。 在以上种种因素的作用下，埃森哲迟迟没有交付一个可用的网站或者应用程序。而且，只要完成这个项目，赫兹还需要支付超过1000万美元的额外费用。 因为项目要再进行下去，还需要发现并纠正埃森哲工作中的缺陷，以及开发埃森哲本应交付但未能交付的功能。 赫兹终于忍无可忍，一纸诉状将埃森哲告上法庭。 埃森哲的发言人表示，这些指控毫无根据，并打算为自己的立场辩护。因为这是一个正在进行的法律问题，他们拒绝任何进一步评论。 大家怎么看？ 这一事件经过报道后，在各个社交媒体上引发了广泛的讨论。 大多数人的看法都是震惊，甚至觉得这是一个“洋葱新闻”。 有人觉得，是不是埃森哲转手就把这个项目外包出去了。有人表示，这是一个“巨额预算+巨大公司≠惊人结果”的教训。 也有不少网友对费用感到很敏感，认为3200万美元，就算是一个非常完美的网站也很贵了，更不用说没有响应式设计的网站了。 有业内人士表示，很多中小型的咨询公司只需要更少的费用，就能够完成1000倍以上的工作了，但这些公司对咨询品牌的痴迷，导致这些中小公司根本没有参与的机会。 甚至有人表示，只要给我500万就能设计出来一个完美的网站，顺势做起了自己网站设计开发的广告。 也有人直接站出来说，到哪能够找到这么好的工作？ 不过，也有网友保持理性客观的态度， 称期待听到埃森哲一面的说法。 你怎么看？ 此外，如果你对这次诉讼有更深的兴趣，请收好下面赫兹起诉书的传送门: https://regmedia.co.uk/2019/04/23/hertz-accenture-website.pdf — 完 —","link":"/2019/04/28/02%E6%96%B0%E9%97%BB/01%E5%9F%83%E6%A3%AE%E5%93%B22%E4%BA%BF%E9%A1%B9%E7%9B%AE/"},{"title":"安装 go和beego后的环境变量设置","text":"简介之前有几次因为环境变量设置的问题 损失了一些时间，特在此做记录 安装golang 可参考官方Getting Started，但有时候有问题。 解压 1tar -C /usr/local -xzf go$VERSION.$OS-$ARCH.tar.gz 环境变量 go 核心文件所在的目录GOROOT 123export PATH=$PATH:/usr/local/go/binexport GOROOT=/usr/local/goexport PATH=$PATH:$GOROOT/bin 安装beego go get安装 12go get github.com/astaxie/beegogo get github.com/beego/bee 环境变量 GOPATH go下载文件所在的位置 12export GOPATH=/home/zhangjun/workexport PATH=$PATH:$GOPATH/binbee new 文件名 必须在$GOPATH/src下才能生效bee run 运行程序","link":"/2020/01/04/03Go/01go%E5%92%8Cbeego%E5%90%8E%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE/"}],"tags":[{"name":"博客","slug":"博客","link":"/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"IT新闻","slug":"IT新闻","link":"/tags/IT%E6%96%B0%E9%97%BB/"},{"name":"Golang","slug":"Golang","link":"/tags/Golang/"}],"categories":[{"name":"博客","slug":"博客","link":"/categories/%E5%8D%9A%E5%AE%A2/"},{"name":"IT新闻","slug":"IT新闻","link":"/categories/IT%E6%96%B0%E9%97%BB/"},{"name":"Golang","slug":"Golang","link":"/categories/Golang/"}]}